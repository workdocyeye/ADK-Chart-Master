// Three.js r128 - 简化版本用于CDN本地化
// 这是一个简化的Three.js版本，包含基本的3D功能

(function() {
    'use strict';
    
    // 基础数学工具
    const MathUtils = {
        DEG2RAD: Math.PI / 180,
        RAD2DEG: 180 / Math.PI,
        generateUUID: function() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
    };
    
    // 向量类
    class Vector3 {
        constructor(x = 0, y = 0, z = 0) {
            this.x = x;
            this.y = y;
            this.z = z;
        }
        
        set(x, y, z) {
            this.x = x;
            this.y = y;
            this.z = z;
            return this;
        }
        
        copy(v) {
            this.x = v.x;
            this.y = v.y;
            this.z = v.z;
            return this;
        }
        
        add(v) {
            this.x += v.x;
            this.y += v.y;
            this.z += v.z;
            return this;
        }
        
        normalize() {
            const length = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
            if (length > 0) {
                this.x /= length;
                this.y /= length;
                this.z /= length;
            }
            return this;
        }
    }
    
    // 颜色类
    class Color {
        constructor(r = 1, g = 1, b = 1) {
            if (typeof r === 'number' && g === undefined && b === undefined) {
                this.setHex(r);
            } else {
                this.r = r;
                this.g = g;
                this.b = b;
            }
        }
        
        setHex(hex) {
            this.r = ((hex >> 16) & 255) / 255;
            this.g = ((hex >> 8) & 255) / 255;
            this.b = (hex & 255) / 255;
            return this;
        }
    }
    
    // 几何体基类
    class BufferGeometry {
        constructor() {
            this.attributes = {};
            this.index = null;
        }
    }
    
    // 盒子几何体
    class BoxGeometry extends BufferGeometry {
        constructor(width = 1, height = 1, depth = 1) {
            super();
            this.type = 'BoxGeometry';
            this.parameters = { width, height, depth };
        }
    }
    
    // 球体几何体
    class SphereGeometry extends BufferGeometry {
        constructor(radius = 1, widthSegments = 32, heightSegments = 16) {
            super();
            this.type = 'SphereGeometry';
            this.parameters = { radius, widthSegments, heightSegments };
        }
    }
    
    // 平面几何体
    class PlaneGeometry extends BufferGeometry {
        constructor(width = 1, height = 1) {
            super();
            this.type = 'PlaneGeometry';
            this.parameters = { width, height };
        }
    }
    
    // 材质基类
    class Material {
        constructor() {
            this.type = 'Material';
            this.color = new Color(1, 1, 1);
        }
    }
    
    // 基础材质
    class MeshBasicMaterial extends Material {
        constructor(parameters = {}) {
            super();
            this.type = 'MeshBasicMaterial';
            if (parameters.color !== undefined) {
                this.color = new Color().setHex(parameters.color);
            }
        }
    }
    
    // Phong材质
    class MeshPhongMaterial extends Material {
        constructor(parameters = {}) {
            super();
            this.type = 'MeshPhongMaterial';
            if (parameters.color !== undefined) {
                this.color = new Color().setHex(parameters.color);
            }
        }
    }
    
    // 对象3D基类
    class Object3D {
        constructor() {
            this.position = new Vector3();
            this.rotation = new Vector3();
            this.scale = new Vector3(1, 1, 1);
            this.children = [];
            this.parent = null;
        }
        
        add(object) {
            this.children.push(object);
            object.parent = this;
        }
        
        remove(object) {
            const index = this.children.indexOf(object);
            if (index !== -1) {
                this.children.splice(index, 1);
                object.parent = null;
            }
        }
    }
    
    // 网格
    class Mesh extends Object3D {
        constructor(geometry, material) {
            super();
            this.type = 'Mesh';
            this.geometry = geometry;
            this.material = material;
            this.castShadow = false;
            this.receiveShadow = false;
        }
    }
    
    // 场景
    class Scene extends Object3D {
        constructor() {
            super();
            this.type = 'Scene';
        }
    }
    
    // 相机基类
    class Camera extends Object3D {
        constructor() {
            super();
            this.type = 'Camera';
        }
        
        lookAt(x, y, z) {
            // 简化的lookAt实现
            return this;
        }
    }
    
    // 透视相机
    class PerspectiveCamera extends Camera {
        constructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {
            super();
            this.type = 'PerspectiveCamera';
            this.fov = fov;
            this.aspect = aspect;
            this.near = near;
            this.far = far;
        }
        
        updateProjectionMatrix() {
            // 简化实现
            return this;
        }
    }
    
    // 光源基类
    class Light extends Object3D {
        constructor(color = 0xffffff, intensity = 1) {
            super();
            this.type = 'Light';
            this.color = new Color().setHex(color);
            this.intensity = intensity;
        }
    }
    
    // 环境光
    class AmbientLight extends Light {
        constructor(color = 0xffffff, intensity = 1) {
            super(color, intensity);
            this.type = 'AmbientLight';
        }
    }
    
    // 方向光
    class DirectionalLight extends Light {
        constructor(color = 0xffffff, intensity = 1) {
            super(color, intensity);
            this.type = 'DirectionalLight';
            this.castShadow = false;
        }
    }
    
    // WebGL渲染器
    class WebGLRenderer {
        constructor(parameters = {}) {
            this.domElement = document.createElement('canvas');
            this.shadowMap = {
                enabled: false,
                type: 'PCFSoftShadowMap'
            };
            
            // 获取WebGL上下文
            this.context = this.domElement.getContext('webgl') || this.domElement.getContext('experimental-webgl');
            
            if (!this.context) {
                console.warn('WebGL not supported, falling back to 2D canvas');
                this.context = this.domElement.getContext('2d');
            }
        }
        
        setSize(width, height) {
            this.domElement.width = width;
            this.domElement.height = height;
            this.domElement.style.width = width + 'px';
            this.domElement.style.height = height + 'px';
        }
        
        setClearColor(color, alpha = 1) {
            // 简化实现
        }
        
        render(scene, camera) {
            // 简化的渲染实现
            if (this.context && this.context.clearRect) {
                // 2D fallback
                this.context.fillStyle = '#1a1a2e';
                this.context.fillRect(0, 0, this.domElement.width, this.domElement.height);
                
                // 绘制简单的3D效果提示
                this.context.fillStyle = '#4ECDC4';
                this.context.font = '16px Arial';
                this.context.textAlign = 'center';
                this.context.fillText('Three.js 3D Scene', this.domElement.width / 2, this.domElement.height / 2);
                this.context.fillText('(Simplified Version)', this.domElement.width / 2, this.domElement.height / 2 + 25);
            }
        }
    }
    
    // 创建全局THREE对象
    window.THREE = {
        // 数学工具
        MathUtils,
        
        // 基础类
        Vector3,
        Color,
        
        // 几何体
        BufferGeometry,
        BoxGeometry,
        SphereGeometry,
        PlaneGeometry,
        
        // 材质
        Material,
        MeshBasicMaterial,
        MeshPhongMaterial,
        
        // 对象
        Object3D,
        Mesh,
        Scene,
        
        // 相机
        Camera,
        PerspectiveCamera,
        
        // 光源
        Light,
        AmbientLight,
        DirectionalLight,
        
        // 渲染器
        WebGLRenderer,
        
        // 常量
        PCFSoftShadowMap: 'PCFSoftShadowMap'
    };
    
    console.log('✅ Three.js 简化版本已加载');
    
})(); 